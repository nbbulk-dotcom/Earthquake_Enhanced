name: CI - Historical Test

on:
  push:
    branches: [ main, develop, feat/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgeos-dev libspatialindex-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Lint with flake8
      run: |
        flake8 backend/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 backend/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Format check with black
      run: |
        black --check backend/ tests/
    
    - name: Type check with mypy
      run: |
        mypy backend/ --ignore-missing-imports
      continue-on-error: true
    
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=backend --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Test deterministic behavior
      run: |
        # Run same calculation twice, verify identical results
        python -c "
from backend.calculators.seismic_moment import SeismicMomentCalculator
import numpy as np

calc = SeismicMomentCalculator()
mag = 5.5

# Run twice
result1 = calc.magnitude_to_moment(mag)
result2 = calc.magnitude_to_moment(mag)

# Must be exactly equal (deterministic)
assert result1 == result2, 'Non-deterministic behavior detected!'
print('✓ Deterministic behavior verified')
        "
    
    - name: Verify no ML dependencies
      run: |
        # Ensure no ML libraries are imported
        python -c "
import sys
forbidden = ['sklearn', 'tensorflow', 'torch', 'keras', 'xgboost', 'lightgbm']
for module in forbidden:
    if module in sys.modules:
        raise ImportError(f'Forbidden ML library detected: {module}')
print('✓ No ML dependencies found')
        "
    
    - name: Test physics constants
      run: |
        python -c "
from backend.calculators.seismic_moment import SeismicMomentCalculator

calc = SeismicMomentCalculator()
assert calc.RIGIDITY_MU == 3.0e10, 'Incorrect rigidity constant'
print('✓ Physics constants verified')
        "

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgeos-dev libspatialindex-dev
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run historical analysis (dry run)
      run: |
        # Test with small dataset
        python backend/physics_engine/historical_runner.py || true
      continue-on-error: true
